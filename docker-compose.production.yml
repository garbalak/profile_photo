version: "3"

services:
  db:
    image: mariadb:10.6
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - private
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=profile_photo0
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "--silent" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  api:
    build:
      dockerfile: Django.Dockerfile
      context: .
    volumes:
      - ./server:/code
    expose:
      - 8000
    networks:
      - traefik_webgateway
      - private
    environment:
      - MYSQL_NAME=profile_photo0
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root
      - PORT=3306
    depends_on:
      - db
    restart: on-failure
    labels:
      # Standard configuration
      - "traefik.enable=true"
      - "traefik.http.routers.myprojectdjango.rule=Host(`${API_HOST}`)"
      - "traefik.http.services.myprojectdjango.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik_webgateway"
      # HTTPS configuration
      - "traefik.http.routers.myprojectdjango.tls=true"
      - "traefik.http.routers.myprojectdjango.tls.certresolver=letsencrypt"
      - "traefik.http.routers.myprojectdjango.entrypoints=websecure"

#  frontend:
#    build:
#      dockerfile: Frontend.Dockerfile
#      context: .
#    networks:
#      - traefik_webgateway
#      - private
#    depends_on:
#      - api
#    restart: on-failure
#    labels:
#      # Standard configuration
#      - "traefik.enable=true"
#      - "traefik.http.routers.myprojectfrontend.rule=Host(`${APP_HOST}`)"
#      - "traefik.http.services.myprojectfrontend.loadbalancer.server.port=80"
#      - "traefik.docker.network=traefik_webgateway"
#      # HTTPS configuration
#      - "traefik.http.routers.myprojectfrontend.tls=true"
#      - "traefik.http.routers.myprojectfrontend.tls.certresolver=letsencrypt"
#      - "traefik.http.routers.myprojectfrontend.entrypoints=websecure"

  staticfiles:
    build:
      dockerfile: Staticfiles.Dockerfile
      context: .
    networks:
      - traefik_webgateway
    depends_on:
      - api
    restart: on-failure
    labels:
      # Standard configuration
      - "traefik.enable=true"
      - "traefik.http.routers.myprojectstaticfiles.rule=Host(`${STATICFILES_HOST}`)"
      - "traefik.http.services.myprojectstaticfiles.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik_webgateway"
      # HTTPS configuration
      - "traefik.http.routers.myprojectstaticfiles.tls=true"
      - "traefik.http.routers.myprojectstaticfiles.tls.certresolver=letsencrypt"
      - "traefik.http.routers.myprojectstaticfiles.entrypoints=websecure"

#  rabbitmq:
#    image: rabbitmq:3.8-management
#    hostname: rabbitmq
#    networks:
#      - private
#    restart: on-failure
#
#  celeryworker:
#    build:
#        dockerfile: Celery.Dockerfile
#        context: .
#    command: celery -A myproject worker --loglevel=info --max-tasks-per-child=1
#    volumes:
#      - ./api:/code
#    networks:
#      - private
#    environment:
#      - CELERY_BROKER=amqp://guest:guest@rabbitmq:5672
#      - DJANGO_SETTINGS_MODULE=server.settings
#    restart: on-failure
#    depends_on:
#      - rabbitmq
#
#  celerybeat:
#    build:
#        dockerfile: Celery.Dockerfile
#        context: .
#    command: celery -A myproject beat -l info
#    volumes:
#      - ./api:/code
#    networks:
#      - private
#    environment:
#      - CELERY_BROKER=amqp://guest:guest@rabbitmq:5672
#      - DJANGO_SETTINGS_MODULE=server.settings
#    restart: on-failure
#    depends_on:
#      - rabbitmq

networks:
  private:
  traefik_webgateway:
    external: true

volumes:
  mysql_data:
